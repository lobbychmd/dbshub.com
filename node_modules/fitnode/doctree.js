/***********  根据表间关系构造树(json) 然后提供给 fitui.js 的 ajaxTree **********/

var doctree = function (db, config) {
    this.db = db;
    this.config = config;
}

exports.doctree = doctree;

doctree.prototype = {
    constructor: doctree,
    middleware: {
        az: {
            dir: function (type, subtype, parent_attr) {
                var data = [];
                var letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                for (c in letters) {
                    var l = { filter: "[" + letters[c].toUpperCase() + letters[c].toLowerCase() + "]", text: letters[c], parent_type: type,
                        sub_type: subtype, middleware: 'az'
                    };
                    for (var i in parent_attr)
                        if (i && !l[i]) l[i] = parent_attr[i];
                    data.push(l);
                }
                return data;
            },
            children: function (_doctree, parent_attr) {
                var query = {};
                query[_doctree.config[parent_attr["sub_type"]].text] = eval('/^t' + parent_attr['filter'] + '/');
                return [{ type: parent_attr['sub_type'], query: query}];
            }
        },
        summary: {
            dir: function (type, subtype, parent_attr) {
                return [{ text: '全部表', type: type, sub_type: subtype, middleware: 'summary'}];
            },
            children: function (_doctree, parent_attr) {
                var query = {};
                return [{ type: parent_attr['sub_type'], query: query}];
            }
        }
    },

    get: function (attr, callback) {
        var type = attr['type'];
        var c = this.config[type];
        if (attr['middleware']) {
            c.children = this.middleware[attr.middleware].children(this, attr);
        }
        var _doctree = this;
        new new require('./util.js').seq_asyncArray(
            function (item, params, callback) {
                if (item.middleware) {
                    var data = _doctree.middleware[item.middleware].dir(type, item.type, attr);
                    callback(params ? params.concat(data) : data);
                }
                else {
                    var data = [];
                    if (item.type) {
                        var cc = _doctree.config[item.type];
                        console.log(item.query);
                        _doctree.db.collection(cc.table).find(item.query).toArray(function (err, rows) {
                            for (var i in rows)
                                data.push({ text: rows[i][cc.text], table: cc.table, _id: rows[i]._id});
                            callback(params ? params.concat(data) : data);
                        });
                    }
                }
            },
            c.children,
            function (params) { callback(params); }
        ).exec();
    }
}